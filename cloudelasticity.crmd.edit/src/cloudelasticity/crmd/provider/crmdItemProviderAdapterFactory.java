/**
 */
package cloudelasticity.crmd.provider;

import cloudelasticity.crmd.util.crmdAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class crmdItemProviderAdapterFactory extends crmdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public crmdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Resourcerequirment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcerequirmentItemProvider resourcerequirmentItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Resourcerequirment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcerequirmentAdapter() {
		if (resourcerequirmentItemProvider == null) {
			resourcerequirmentItemProvider = new ResourcerequirmentItemProvider(this);
		}

		return resourcerequirmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.cRDM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected cRDMItemProvider cRDMItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.cRDM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcRDMAdapter() {
		if (cRDMItemProvider == null) {
			cRDMItemProvider = new cRDMItemProvider(this);
		}

		return cRDMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.C_Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected C_LinkItemProvider c_LinkItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.C_Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createC_LinkAdapter() {
		if (c_LinkItemProvider == null) {
			c_LinkItemProvider = new C_LinkItemProvider(this);
		}

		return c_LinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Atomicresource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicresourceItemProvider atomicresourceItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Atomicresource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicresourceAdapter() {
		if (atomicresourceItemProvider == null) {
			atomicresourceItemProvider = new AtomicresourceItemProvider(this);
		}

		return atomicresourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.cRDMEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected cRDMEntityItemProvider cRDMEntityItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.cRDMEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createcRDMEntityAdapter() {
		if (cRDMEntityItemProvider == null) {
			cRDMEntityItemProvider = new cRDMEntityItemProvider(this);
		}

		return cRDMEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Compositeresource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeresourceItemProvider compositeresourceItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Compositeresource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeresourceAdapter() {
		if (compositeresourceItemProvider == null) {
			compositeresourceItemProvider = new CompositeresourceItemProvider(this);
		}

		return compositeresourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.C_SM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected C_SMItemProvider c_SMItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.C_SM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createC_SMAdapter() {
		if (c_SMItemProvider == null) {
			c_SMItemProvider = new C_SMItemProvider(this);
		}

		return c_SMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Cloudresource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudresourceItemProvider cloudresourceItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Cloudresource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudresourceAdapter() {
		if (cloudresourceItemProvider == null) {
			cloudresourceItemProvider = new CloudresourceItemProvider(this);
		}

		return cloudresourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Resourceconstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceconstraintItemProvider resourceconstraintItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Resourceconstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceconstraintAdapter() {
		if (resourceconstraintItemProvider == null) {
			resourceconstraintItemProvider = new ResourceconstraintItemProvider(this);
		}

		return resourceconstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.CloudResourcerequirment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudResourcerequirmentItemProvider cloudResourcerequirmentItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.CloudResourcerequirment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudResourcerequirmentAdapter() {
		if (cloudResourcerequirmentItemProvider == null) {
			cloudResourcerequirmentItemProvider = new CloudResourcerequirmentItemProvider(this);
		}

		return cloudResourcerequirmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.StateResourcerequirment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateResourcerequirmentItemProvider stateResourcerequirmentItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.StateResourcerequirment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateResourcerequirmentAdapter() {
		if (stateResourcerequirmentItemProvider == null) {
			stateResourcerequirmentItemProvider = new StateResourcerequirmentItemProvider(this);
		}

		return stateResourcerequirmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Reconfigurationaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurationactionItemProvider reconfigurationactionItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Reconfigurationaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurationactionAdapter() {
		if (reconfigurationactionItemProvider == null) {
			reconfigurationactionItemProvider = new ReconfigurationactionItemProvider(this);
		}

		return reconfigurationactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.NormalState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalStateItemProvider normalStateItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.NormalState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalStateAdapter() {
		if (normalStateItemProvider == null) {
			normalStateItemProvider = new NormalStateItemProvider(this);
		}

		return normalStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.InitialState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialStateItemProvider initialStateItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.InitialState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialStateAdapter() {
		if (initialStateItemProvider == null) {
			initialStateItemProvider = new InitialStateItemProvider(this);
		}

		return initialStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.FinalState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalStateItemProvider finalStateItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.FinalState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalStateAdapter() {
		if (finalStateItemProvider == null) {
			finalStateItemProvider = new FinalStateItemProvider(this);
		}

		return finalStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Mainmap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainmapItemProvider mainmapItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Mainmap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainmapAdapter() {
		if (mainmapItemProvider == null) {
			mainmapItemProvider = new MainmapItemProvider(this);
		}

		return mainmapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.BasicAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicActionItemProvider basicActionItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.BasicAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicActionAdapter() {
		if (basicActionItemProvider == null) {
			basicActionItemProvider = new BasicActionItemProvider(this);
		}

		return basicActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Migration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MigrationItemProvider migrationItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Migration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMigrationAdapter() {
		if (migrationItemProvider == null) {
			migrationItemProvider = new MigrationItemProvider(this);
		}

		return migrationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Horizontalscaling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalscalingItemProvider horizontalscalingItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Horizontalscaling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalscalingAdapter() {
		if (horizontalscalingItemProvider == null) {
			horizontalscalingItemProvider = new HorizontalscalingItemProvider(this);
		}

		return horizontalscalingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Verticalscaling} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerticalscalingItemProvider verticalscalingItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Verticalscaling}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerticalscalingAdapter() {
		if (verticalscalingItemProvider == null) {
			verticalscalingItemProvider = new VerticalscalingItemProvider(this);
		}

		return verticalscalingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Compositereconfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositereconfigurationItemProvider compositereconfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Compositereconfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositereconfigurationAdapter() {
		if (compositereconfigurationItemProvider == null) {
			compositereconfigurationItemProvider = new CompositereconfigurationItemProvider(this);
		}

		return compositereconfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Provider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProviderItemProvider providerItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Provider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProviderAdapter() {
		if (providerItemProvider == null) {
			providerItemProvider = new ProviderItemProvider(this);
		}

		return providerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.AWS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AWSItemProvider awsItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.AWS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAWSAdapter() {
		if (awsItemProvider == null) {
			awsItemProvider = new AWSItemProvider(this);
		}

		return awsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Openstack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpenstackItemProvider openstackItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Openstack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpenstackAdapter() {
		if (openstackItemProvider == null) {
			openstackItemProvider = new OpenstackItemProvider(this);
		}

		return openstackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.GoogleCloudPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoogleCloudPlatformItemProvider googleCloudPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.GoogleCloudPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoogleCloudPlatformAdapter() {
		if (googleCloudPlatformItemProvider == null) {
			googleCloudPlatformItemProvider = new GoogleCloudPlatformItemProvider(this);
		}

		return googleCloudPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.OrechestrationTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrechestrationToolItemProvider orechestrationToolItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.OrechestrationTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrechestrationToolAdapter() {
		if (orechestrationToolItemProvider == null) {
			orechestrationToolItemProvider = new OrechestrationToolItemProvider(this);
		}

		return orechestrationToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.TSA} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TSAItemProvider tsaItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.TSA}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTSAAdapter() {
		if (tsaItemProvider == null) {
			tsaItemProvider = new TSAItemProvider(this);
		}

		return tsaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Ttransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TtransitionItemProvider ttransitionItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Ttransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTtransitionAdapter() {
		if (ttransitionItemProvider == null) {
			ttransitionItemProvider = new TtransitionItemProvider(this);
		}

		return ttransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Tstate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TstateItemProvider tstateItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Tstate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTstateAdapter() {
		if (tstateItemProvider == null) {
			tstateItemProvider = new TstateItemProvider(this);
		}

		return tstateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudelasticity.crmd.Normaltransilien} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormaltransilienItemProvider normaltransilienItemProvider;

	/**
	 * This creates an adapter for a {@link cloudelasticity.crmd.Normaltransilien}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormaltransilienAdapter() {
		if (normaltransilienItemProvider == null) {
			normaltransilienItemProvider = new NormaltransilienItemProvider(this);
		}

		return normaltransilienItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (resourcerequirmentItemProvider != null) resourcerequirmentItemProvider.dispose();
		if (cRDMItemProvider != null) cRDMItemProvider.dispose();
		if (c_LinkItemProvider != null) c_LinkItemProvider.dispose();
		if (atomicresourceItemProvider != null) atomicresourceItemProvider.dispose();
		if (cRDMEntityItemProvider != null) cRDMEntityItemProvider.dispose();
		if (compositeresourceItemProvider != null) compositeresourceItemProvider.dispose();
		if (c_SMItemProvider != null) c_SMItemProvider.dispose();
		if (cloudresourceItemProvider != null) cloudresourceItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (resourceconstraintItemProvider != null) resourceconstraintItemProvider.dispose();
		if (cloudResourcerequirmentItemProvider != null) cloudResourcerequirmentItemProvider.dispose();
		if (stateResourcerequirmentItemProvider != null) stateResourcerequirmentItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (reconfigurationactionItemProvider != null) reconfigurationactionItemProvider.dispose();
		if (normalStateItemProvider != null) normalStateItemProvider.dispose();
		if (initialStateItemProvider != null) initialStateItemProvider.dispose();
		if (finalStateItemProvider != null) finalStateItemProvider.dispose();
		if (mainmapItemProvider != null) mainmapItemProvider.dispose();
		if (connectorItemProvider != null) connectorItemProvider.dispose();
		if (basicActionItemProvider != null) basicActionItemProvider.dispose();
		if (migrationItemProvider != null) migrationItemProvider.dispose();
		if (horizontalscalingItemProvider != null) horizontalscalingItemProvider.dispose();
		if (verticalscalingItemProvider != null) verticalscalingItemProvider.dispose();
		if (compositereconfigurationItemProvider != null) compositereconfigurationItemProvider.dispose();
		if (providerItemProvider != null) providerItemProvider.dispose();
		if (awsItemProvider != null) awsItemProvider.dispose();
		if (openstackItemProvider != null) openstackItemProvider.dispose();
		if (googleCloudPlatformItemProvider != null) googleCloudPlatformItemProvider.dispose();
		if (orechestrationToolItemProvider != null) orechestrationToolItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (tsaItemProvider != null) tsaItemProvider.dispose();
		if (ttransitionItemProvider != null) ttransitionItemProvider.dispose();
		if (tstateItemProvider != null) tstateItemProvider.dispose();
		if (dependencyItemProvider != null) dependencyItemProvider.dispose();
		if (normaltransilienItemProvider != null) normaltransilienItemProvider.dispose();
	}

}
